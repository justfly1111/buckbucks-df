/*
 *  Copyright (C) 2019 Scoopta
 *  This file is part of Root Bar
 *  Root Bar is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Root Bar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Root Bar.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <map.h>
#include <utils.h>

#include <stdio.h>
#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <pthread.h>

#include <sys/wait.h>

static const char* arg_names[] = {"exec", "interval"};

struct external {
	const char* exec;
	char* ret;
	time_t interval;
};

static void* poll(void* data) {
	struct external* this = data;
	while(true) {
		if(this->exec == NULL) {
			fprintf(stderr, "That's not a valid executable\n");
			goto sleep;
		}
		int fds[2];
		pipe(fds);
		if(fork() == 0) {
			close(fds[0]);
			close(STDOUT_FILENO);
			dup2(fds[1], STDOUT_FILENO);
			execl(this->exec, this->exec, NULL);
			fprintf(stderr, "%s cannot be found\n", this->exec);
			exit(errno);
		}
		close(fds[1]);

		size_t buf_s = fcntl(fds[0], F_GETPIPE_SZ);
		char* buf = calloc(1, buf_s);
		read(fds[0], buf, buf_s);
		close(fds[0]);

		while(waitpid(-1, NULL, WNOHANG) > 0);

		if(buf[0] == 0) {
			fprintf(stderr, "%s is being really quiet\n", this->exec);
			goto sleep;
		}
		buf[strlen(buf) - 1] = 0;
		if(this->ret != NULL) {
			free(this->ret);
		}
		this->ret = strdup(buf);
		free(buf);
		sleep:
		utils_sleep_millis(this->interval);
	}
	return NULL;
}

void* rootbar_external_init(struct map* props) {
	struct external* this = calloc(1, sizeof(struct external));
	this->exec = strdup(map_get(props, "exec"));
	const char* interval = map_get(props, "interval");
	if(interval == NULL) {
		interval = "1000";
	}
	this->interval = strtol(interval, NULL, 10);
	pthread_t thread;
	pthread_create(&thread, NULL, poll, this);
	return this;
}

const char** rootbar_external_get_arg_names() {
	return arg_names;
}

size_t rootbar_external_get_arg_count() {
	return sizeof(arg_names) / sizeof(char*);
}

void rootbar_external_get_info(void* data, const char* format, char* out, size_t size) {
	struct external* this = data;
	snprintf(out, size, format, this->ret);
}

void rootbar_external_click(void* data, const char* button) {
	struct external* this = data;
	if(this->exec != NULL) {
		if(fork() == 0) {
			execlp(this->exec, this->exec, button, NULL);
			fprintf(stderr, "%s cannot be executed\n", this->exec);
			exit(errno);
		}
		while(waitpid(-1, NULL, WNOHANG) > 0);
	}
}
